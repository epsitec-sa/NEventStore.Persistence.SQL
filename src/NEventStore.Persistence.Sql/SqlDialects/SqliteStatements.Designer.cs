//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NEventStore.Persistence.Sql.SqlDialects {
    using System;
    using System.Reflection;


    internal class SqliteStatements {
        private static global::System.Globalization.CultureInfo resourceCulture;

        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE IF NOT EXISTS Commits
        ///(
        ///       BucketId varchar(40) NOT NULL,
        ///       StreamId char(40) NOT NULL,
        ///       StreamIdOriginal text NOT NULL,
        ///       StreamRevision int NOT NULL CHECK (StreamRevision > 0),
        ///       Items int NOT NULL CHECK (Items > 0),
        ///       CommitId guid NOT NULL CHECK (CommitId != 0),
        ///       CommitSequence int NOT NULL CHECK (CommitSequence > 0),
        ///       CommitStamp datetime NOT NULL,
        ///       CheckpointNumber INTEGER PRIMARY KEY AUTOINCREMENT,
        ///       Dispatched bit NOT NULL  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InitializeStorage {
            get {
                return ResourceManagerStub.GetString(@"CREATE TABLE IF NOT EXISTS Commits
(
       BucketId varchar(40) NOT NULL,
       StreamId char(40) NOT NULL,
       StreamIdOriginal text NOT NULL,
       StreamRevision int NOT NULL CHECK (StreamRevision > 0),
       Items int NOT NULL CHECK (Items > 0),
       CommitId guid NOT NULL CHECK (CommitId != 0),
       CommitSequence int NOT NULL CHECK (CommitSequence > 0),
       CommitStamp datetime NOT NULL,
       CheckpointNumber INTEGER PRIMARY KEY AUTOINCREMENT,
       Dispatched bit NOT NULL DEFAULT 0,
       Headers blob NULL,
       Payload blob NOT NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS IX_Commits_CommitSequence ON Commits (BucketId, StreamId, CommitSequence);
CREATE UNIQUE INDEX IF NOT EXISTS IX_Commits_CommitId ON Commits (BucketId, StreamId, CommitId);
CREATE UNIQUE INDEX IF NOT EXISTS IX_Commits_Revisions ON Commits (BucketId, StreamId, StreamRevision, Items);
CREATE INDEX IF NOT EXISTS IX_Commits_Dispatched ON Commits (Dispatched);
CREATE INDEX IF NOT EXISTS IX_Commits_Stamp ON Commits (CommitStamp);

CREATE TABLE IF NOT EXISTS Snapshots
(
       BucketId varchar(40) NOT NULL,
       StreamId char(40) NOT NULL,
       StreamRevision int NOT NULL CHECK (StreamRevision > 0),
       Payload blob NOT NULL,
       CONSTRAINT PK_Snapshots PRIMARY KEY (BucketId, StreamId, StreamRevision)
);", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT INTO Commits (
        ///    BucketId,
        ///    StreamId,
        ///    StreamIdOriginal,
        ///    CommitId,
        ///    CommitSequence,
        ///    StreamRevision,
        ///    Items,
        ///    CommitStamp,
        ///    Headers,
        ///    Payload)
        ///VALUES (
        ///    @BucketId,
        ///    @StreamId,
        ///    @StreamIdOriginal,
        ///    @CommitId,
        ///    @CommitSequence,
        ///    @StreamRevision,
        ///    @Items,
        ///    @CommitStamp,
        ///    @Headers,
        ///    @Payload);
        ///SELECT last_insert_rowid();.
        /// </summary>
        internal static string PersistCommit {
            get {
                return ResourceManagerStub.GetString(@"INSERT INTO Commits (
    BucketId,
    StreamId,
    StreamIdOriginal,
    CommitId,
    CommitSequence,
    StreamRevision,
    Items,
    CommitStamp,
    Headers,
    Payload)
VALUES (
    @BucketId,
    @StreamId,
    @StreamIdOriginal,
    @CommitId,
    @CommitSequence,
    @StreamRevision,
    @Items,
    @CommitStamp,
    @Headers,
    @Payload);
SELECT last_insert_rowid();", resourceCulture);
            }
        }
    }
}
